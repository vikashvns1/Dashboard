@using System.Collections.ObjectModel;
@using System.ComponentModel;
@using System.Data;
@using System.Dynamic;
@using DashBoardModel;
@using Newtonsoft.Json;
<style>
    nav-item a:active {
        background-color: rgba(255,255,255,0.25);
        color: white;
    }

    nav-item a:hover {
        background-color: rgba(255,255,255,0.1);
        color: black;
    }
</style>
@*<RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded" Style="background-color:#303EA0;margin-top:80px;">
        <ChildContent>
            <RadzenPanelMenu Style="background-color:transparent;margin-top:20px;">
                <div class="NavMenuCssClass">
                    <ul class="nav flex-column">
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="/Home" Style="background-color:#303EA0;color:white;">
                                <span class="oi oi-home" aria-hidden="true"></span>&nbsp;&nbsp;Home
                            </NavLink>
                        </li>
                    </ul>
                    <ul class="nav flex-column">
                        @foreach (var mn in StaticDataSource.MenuItemList)
                        {
    @if (mn.Parentmenu_id == 0)
    {
        string _pageName = string.IsNullOrEmpty(mn.PageName) ? "#" : mn.PageName;
    <li class="nav-item px-3">
        <NavLink class="nav-link" href="@_pageName" Style="background-color:#303EA0;color:white;" @onclick="()=>GetIsClicked(mn)">
            <span class="@mn.Icon" aria-hidden="true"></span>&nbsp;&nbsp;@mn.Menu
        </NavLink>
        <ul class="nav flex-column">
            @foreach (var mn1 in StaticDataSource.MenuItemList)
            {
    @if (mn.Menu_id == mn1.Parentmenu_id)
    {
    @if (expandSubNav && mn.Menu_id == clickedMenu)
    {

    <li class="nav-item px-3">
        <NavLink class="nav-link" href="@mn1.PageName" Style="background-color:#303EA0;color:white;" @onclick="()=>GetIsClicked(mn1)">
            <span class="@mn1.Icon" aria-hidden="true"></span>@mn1.Menu
        </NavLink>
    </li>}}}
        </ul>
    </li>
    }}
                    </ul>
                    <ul class="nav flex-column">
                        <li class="nav-item px-3">
                            <NavLink class="nav-link" href="#" Style="background-color:#303EA0;color:white;">
                                <span class="oi oi-graph" aria-hidden="true"></span>&nbsp;&nbsp;Setting
                            </NavLink>
                        </li>
                    </ul>
                </div>
            </RadzenPanelMenu>
        </ChildContent>
    </RadzenSidebar>*@


<RadzenSidebar @ref="@sidebar0" @bind-Expanded="@sidebarExpanded" Style="background-color:#303EA0;margin-top:80px;">
    <ChildContent>
        <RadzenPanelMenu Style="background-color:transparent;margin-top:20px;" Click="@(arg=>MenuClicked(arg))">
            <RadzenPanelMenuItem Text="Home" Path="/Home" Style="background-color:#303EA0;color:white;" />

            @foreach (var mn in StaticDataSource.MenuItemList)
            {
                if (mn.Expand == true)
                {
                    string _pageName = string.IsNullOrEmpty(mn.PageName) ? "#" : mn.PageName;
<RadzenPanelMenuItem Text="@mn.Menu" Style="background-color:#303EA0;color:white;">

    @foreach (var mn1 in StaticDataSource.MenuItemList)
    {
@if (mn.Menu_id == mn1.Parentmenu_id)
{@*@if (expandSubNav && mn.Menu_id == clickedMenu)
        {*@


                                        <RadzenPanelMenuItem Text="@mn1.Menu" Value="@mn1" Style="background-color:#303EA0;color:white;" />}}@*}*@
                                    </RadzenPanelMenuItem> }
                                @*else
                                {
        <RadzenPanelMenuItem Text="@mn.Menu" Value="@mn" Style="background-color:#303EA0;color:white;"/>
       }*@
}
            <RadzenPanelMenuItem Text="Setting" Path="#" Style="background-color:#303EA0;color:white;" />
        </RadzenPanelMenu>
    </ChildContent>
</RadzenSidebar>


@code { [Parameter]
    public RadzenSidebar sidebar0 { get; set; }
    [Parameter]
    public bool sidebarExpanded { get; set; }
    [Inject]
    public IDynamicAPIService DynamicAPIService { get; set; }
@inject NavigationManager navigationManager
private bool expandSubNav;
    private int clickedMenu = 0;
    private int prevClickedMenu = 0;



    public async Task GetIsClicked(MenuItem mn)
    {
        clickedMenu = mn.Menu_id;
        if (prevClickedMenu != clickedMenu)
        {
            if (mn.Expand == true)
                expandSubNav = true;
            else
                expandSubNav = false;
        }
        else
        {
            expandSubNav = !expandSubNav;
        }

        prevClickedMenu = clickedMenu;
        StaticDataSource.MenuItem = null;
        StaticDataSource.MenuItem = mn;
        if (!string.IsNullOrEmpty(mn.PageName))
        {
            if (mn.PageName == "/ReportChart" || mn.PageName == "/ReportComponent")
            {
                StaticDataSource.ComponentId = mn.ComponentId;
                GetRequestConfiguration Report = null;
                Report = StaticDataSource.chartAttributesList.OrderBy(a => a.ChartOrder).Where(a => a.ChartType == "Report" && a.Id == mn.ComponentId).FirstOrDefault();
                if (Report != null)
                {
                    if (Report.TableData == null && Report.ColumnDataTable == null)
                    {
                        Param prm = new Param();
                        prm.IsSp = 0;
                        prm.QueryOrSp = Report.QueryOrSp;
                        string jsonstring = await DynamicAPIService.GetReportsData(StaticDataSource.MenuItem.ConnectionString, StaticDataSource.MenuItem.ProviderName, prm);
                        Report.TableData = null;
                        Report.ColumnDataTable = null;
                        Report.TableData = JsonConvert.DeserializeObject<List<ExpandoObject>>(jsonstring);
                        Report.ColumnDataTable = (DataTable)JsonConvert.DeserializeObject(jsonstring, (typeof(DataTable)));
                    }
                }
            }
            navigationManager.NavigateTo(mn.PageName, true);
        }
    }

    async Task MenuClicked(MenuItemEventArgs args)
    {
        if (args.Value != null)
        {
            var mn = args.Value as MenuItem;
            StaticDataSource.MenuItem = null;
            StaticDataSource.MenuItem = mn;
            if (!string.IsNullOrEmpty(mn.PageName))
            {
                if (mn.PageName == "/ReportChart" || mn.PageName == "/ReportComponent")
                {
                    StaticDataSource.ComponentId = mn.ComponentId;
                    GetRequestConfiguration Report = null;
                    Report = StaticDataSource.chartAttributesList.OrderBy(a => a.ChartOrder).Where(a => a.ChartType == "Report" && a.Id == mn.ComponentId).FirstOrDefault();
                    if (Report != null)
                    {
                        if (Report.TableData == null && Report.ColumnDataTable == null)
                        {
                            Param prm = new Param();
                            prm.IsSp = 0;
                            prm.QueryOrSp = Report.QueryOrSp;
                            string jsonstring = await DynamicAPIService.GetReportsData(StaticDataSource.MenuItem.ConnectionString, StaticDataSource.MenuItem.ProviderName, prm);
                            Report.TableData = null;
                            Report.ColumnDataTable = null;
                            Report.TableData = JsonConvert.DeserializeObject<List<ExpandoObject>>(jsonstring);
                            Report.ColumnDataTable = (DataTable)JsonConvert.DeserializeObject(jsonstring, (typeof(DataTable)));
                            navigationManager.NavigateTo(mn.PageName,true);
                        }
                        else
                        {
                            navigationManager.NavigateTo(mn.PageName,true);
                        }
                    }
                }
                else
                {
                    navigationManager.NavigateTo(mn.PageName,true);
                }
            }
        }
    }

    }
